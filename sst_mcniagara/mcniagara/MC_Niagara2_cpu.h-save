#include "mersenne.h"               // Random number generator

// defining histogram lengths
#define  LD_LD_HIST_LENGTH     513
#define  ST_ST_HIST_LENGTH     513
#define  FP_FP_HIST_LENGTH     513
#define  INT_INT_HIST_LENGTH   513
#define  BR_BR_HIST_LENGTH     513
#define  ST_LD_HIST_LENGTH     513
#define  LD_USE_HIST_LENGTH    513                         // load-to-use histogram
#define  INT_USE_HIST_LENGTH   513                         // int_prodcucer-to-use histogram
#define  FP_USE_HIST_LENGTH    513                         // fp-to-use histogram

class MC_Cpu  {
        enum stall_reason {I_CACHE, L1_CACHE, L2_CACHE, MEMORY, INT_DEP, FGU_DEP, BRANCH, P_FLUSH, STB_FULL};
        enum token_type {IS_LOAD, IS_STORE};
    public:
        double my_rand();
        double make_cdf(double *buf, int length, int ignore_last_n, FILE* inf);
        int sample_hist(double *hist, int hist_length);
        int diff(double  pred, unsigned long long  real, int flag);
        void sanity_check();
        void init(const char* in_file, OffCpuIF *extif);
        double scan_memq(void);
        void add_memq(double when_satisfied, enum token_type whoami);
        double cycles_to_serve_load(enum stall_reason *where, int flag, int d_dist, int l_dist);
        void add_dependency(unsigned long long which_inst, double when_satisfied, enum stall_reason reason);
        void adjust_dependence_chain(double c );
        double is_dependent(unsigned long long which_inst, enum stall_reason *where);
        void serve_store(void);
        void un_init(void);
        int sim_cycle(unsigned long current_cycle);
        void handle_delay_slot(unsigned long long i,enum stall_reason *last_ld_reason_ptr,double *last_ld_satisfied_ptr,double *fdiv_allowed_ptr);
        int fini(const char* outfile);
    private:
       struct dependency {
           unsigned long long      which_inst;             // Instriction number of the DEPENDENT instruction
           double                  when_satisfied;         // Cycle number when the load produces
           enum stall_reason       reason;        
           struct dependency       *next;                  // Pointer to the next node
       };
       struct dependency *dc_head=NULL;

       struct memory_queue {
           double                  when_satisfied;         // the cycle at which the mem op will be satisfied
           enum token_type         whoami;                 // Load or STORE
           struct memory_queue     *next;
       };
       struct memory_queue *mq_head=NULL;
       struct memory_queue *last_store=NULL; 

       int ld_in_q=0, st_in_q=0;                           // Loads and stores currently in mem queue

       double ld_ld_hist[LD_LD_HIST_LENGTH];               // Histograms used in generating
       double st_st_hist[ST_ST_HIST_LENGTH];               // instruction mix.
       double fp_fp_hist[FP_FP_HIST_LENGTH]; 
       double int_int_hist[INT_INT_HIST_LENGTH];
       double br_br_hist[BR_BR_HIST_LENGTH]; 

       double st_ld_hist[ST_LD_HIST_LENGTH];              // Histogram used to model store-forwarding

       double ld_use_hist[LD_USE_HIST_LENGTH];            // Histograms used for dependency checking
       double int_use_hist[INT_USE_HIST_LENGTH]; 
       double fp_use_hist[FP_USE_HIST_LENGTH];

       double P1, P2, PM, PT, PLD, PST;                  // P1 = prob of ld being satisfied in L1
                                                         // P2 = given L1 miss, prob of ld being satisfied in L2
                                                         // PM = given L1,L2 miss,prob of ld being satisfied in mem
                                                         // PT = prob of TLB miss
                                                         // PLD = prob of load  
                                                         // PST = given not ld, prob of st
        
       double PBR, PG, PF, PBM;                          // PBR = given not ld or st, prob of branch
                                                         // PG = given not ld/st/branch, prob of GR producer
                                                         // PF = given not ld/st/br/GR, prob of FR producer
                                                         // PBM = prob of branch miss given branch

       double PLD_D, PST_D, PF_D, PG_D;                  // PLD_D = prob ld in delay slot
                                                         // PST_D = prob st in delay slot, given ld not
                                                         // PF_D = prob fp in delay slot, given not ld or st
                                                         // PG_D = prob int in delay slot, given not ld/st/fp

       double P_1, P_2, P_3, P_4, P_5, P_6, P-7;         // Model probabilities 
                                                         // P_1 = prob that insn is producer
                                                         // P_2 = prob that insn is not producer
                                                         // P_3 = prob that insns is branch
                                                         // P_4 = prob that insn is FP
                                                         // P_5 = prob that insn is FP div/sqrt
                                                         // P_6 = prob that insn is FP but NOT FP div/sqrt 
                                                         // P_7 = prob that insn is INT with latency>1

      double P_8, P_9, P_10, P_11, P_12, P_13;           // P_8 = prob that insn is LD
                                                         // P_9 = prob that insn is LD that does NOT miss DTLB
                                                         // P_10 = prob that insn is LD that doe miss DTLB
                                                         // P_11 = prob that insn is LD that hits in L1
                                                         // P_12 = prob that insn is LD that hits in L2
                                                         // P_13 = prob that insn is LD that hits in mem

      FILE *outf;					 
      double cycles=0;                                   // Current cycle
      double effective_t[50];                            // Holds effective stall time casued by STALL_REASON
      unsigned long long n_loads=0, n_stores=0;          // Num loads, num stores issued by TG 
      unsigned long long n_memops=0, n_branches=0;       // Num mem ops (lds and sts), num branches issued by TG
      unsigned long long n_miss_branches=0;              // Num mispredicted branches issued by TG
      unsigned long long n_l1=0, n_l2=0, n_mem=0;        // Num loads issued buy TG that go to L1, L2 cache and mem
      unsigned long long n_tlb=0, n_gr_produced=0;       // Num DTLB misses, num INT (GR) producers issued by TG
      unsigned long long n_fr_produced=0;                // 
unsigned long long n_pipe_flushes=0, n_icache_misses = 0, n_stb_full = 0, n_stb_reads=0, next_ld=0, last_fdiv = 0;




        Cpu( ComponentId_t id, Clock* clock, Params& params ) :
            Component( id, clock ),
            params( params ),
            state(SEND),
            who(WHO_MEM), 
            frequency( 2200000000.0 )
        {
            _CPU_DBG( "new id=%lu\n", id );
            inputfile="./MC_INPUT";
            outputfile="./MC_OUTPUT";

            Params::iterator it = params.begin(); 
            while( it != params.end() ) { 
                _CPU_DBG("key=%s value=%s\n",
                            it->first.c_str(),it->second.c_str());
                if ( ! it->first.compare("clock") ) {
                    sscanf( it->second.c_str(), "%f", &frequency );
                }    
		if ( ! it->first.compare("mc_cpu_inputfile") ) {
                    inputfile=(it->second.c_str());
                }
                if ( ! it->first.compare("mc_cpu_outputfile") ) {
                    outputfile=(it->second.c_str());
                }
                ++it;
            } 
            
            //mem = LinkAdd( "MEM" );
            handler = new EventHandler< Cpu, bool, Cycle_t, Time_t >
                                                ( this, &Cpu::clock );
            xbhandler = new EventHandler< Cpu, bool, Time_t, Event*>
                                                (this, &Cpu::xbevent);
            xbar = LinkAdd( "xbar", xbhandler);
            _CPU_DBG("frequency=%f\n",frequency);
            ClockRegister( frequency, handler );
            SST::_debug_flags |= DBG_ALL; // DBG_LINK | DBG_LINKMAP;
        }
        int Setup() {
            _CPU_DBG("\n");
            init(inputfile,this);
            return 0;
        }
        int Finish() {
            _CPU_DBG("\n");
            fini(outputfile);
            return 0;
        }

    private:

        Cpu( const Cpu& c );

        bool clock( Cycle_t, Time_t  );
        ClockHandler_t* handler;
        bool handler1( Time_t time, Event *e );
        Event::Handler_t* xbhandler;
        bool xbevent( Time_t, Event*  );

        Params    params;
        Link*       mem;
	Link*       xbar;
        state_t     state;
        who_t       who;
        float       frequency;
        const char* inputfile;
        const char* outputfile;

        BOOST_SERIALIZE {
            _AR_DBG( Cpu, "start\n" );
            BOOST_VOID_CAST_REGISTER( Cpu*, Component* );
            ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP( Component );
            ar & BOOST_SERIALIZATION_NVP( mem );
            ar & BOOST_SERIALIZATION_NVP( handler );
            _AR_DBG( Cpu, "done\n" );
        }
        SAVE_CONSTRUCT_DATA( Cpu ) {
            _AR_DBG( Cpu, "\n" );

            ComponentId_t   id     = t->_id;
            Clock*          clock  = t->_clock;
            Params        params = t->params;

            ar << BOOST_SERIALIZATION_NVP( id );
            ar << BOOST_SERIALIZATION_NVP( clock );
            ar << BOOST_SERIALIZATION_NVP( params );
        } 
        LOAD_CONSTRUCT_DATA( Cpu ) {
            _AR_DBG( Cpu, "\n" );

            ComponentId_t   id;
            Clock*          clock;
            Params        params;

            ar >> BOOST_SERIALIZATION_NVP( id );
            ar >> BOOST_SERIALIZATION_NVP( clock );
            ar >> BOOST_SERIALIZATION_NVP( params );

            ::new(t)Cpu( id, clock, params );
        } 
};

#endif
