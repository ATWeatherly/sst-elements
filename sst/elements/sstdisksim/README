************************************************************************************
The initial writing of the sstdisksim element is done by Marlow Weston-Koprivnikar.
If you have any questions of her, email catblade@gmail.com or hunt me down online
somewhere and I'll do my best to help you get up to speed.

************************************************************************************
Diskmodel:

sstdisksim_straightdisk.cpp and sstdisksim_straightdisk.h are bases for 
a plain, run-of-the-mill, model.  The test file, sstdisksim_tracereader.xml,
is useful for running this.  You also need some fancy trace files.  This
particular diskmodel ie disk controller, is for a single disk.

sstdisksim_raid0.cpp and sstdisksim_raid0.h is the base for a 2-disk raid0
striping mechanism.  The test file, sstdisksim_tracereader_raid0.xml,
is useful for an example on running this.

sstdisksim_raid1.cpp and sstdisksim_raid1.h is the base for a 2-disk raid1
mirroring mechanism.  The test file, sstdisksim_tracereader_raid1.xml,
is useful for an example on running this.  

Need to fix the times in the  output, as they are based on the last recorded 
time in general and not the last recorded time of the actual disk.  This will
 be a little tricky, as the callback doesn't know *which* disk it is using.
I recommend you print out only the time and the disk instead of the time
difference and then from there do some math.

Please note that when adding new models, you need to change the Makefile
and the setup of sstdisksim_tracereader.cpp.  Currently, it iterates 
through the potential disk models until it finds one that is identified.
This is because I'm assuming that each I/O node only has one model.

At the time of this writing, the raid0 model uses only 2 disks.
I'm still waiting for instruction on how to allow for a variable number of links
for separate disks for the controller.  Raid controllers will need to be 
verified as accurate.  In order to get a decent "this is how to implement 
raid" go to 

http://www.pcguide.com/ref/hdd/perf/raid/levels/singleLevel0-c.html

There is no written raid specification, so we have to make due with what is 
available and hope we are close to what the controllers are actually doing.

************************************************************************************
Testing:

Test trace files are checked into a repository on a Sandia development 
machine under
development.sandia.gov/usr/local/svn/SST-SQA/trunk/Miscellaneous/sstdisksim_trace_test_files
Ping a Sandian to get these-these were a little too large to stick in 
the repository.
The .xml files are good examples of how to run this.  Just make sure
that the tracereader xml files point at your directory of where the 
traces that you will have gotten from the sandia machine.

************************************************************************************
Installation Notes:

You need to install *all* disksim libraries before this will work.  
libdisksim does not automatically give you all libraries built in the
disksim package.
These libraries are:
libdisksim.a
libparam.a
libddbg.a
libmemsmodel.a
libmems_internals.a
libdiskmodel.a

When running this, make certain that _all_ related disk parameter
files are in the location you are running from.  Otherwise, errors will 
result.

************************************************************************************
Lua notes:

Yielding isn't working yet.  Also, the lua needs to be updated like tracereader was
to handle the disk controller instead of straight disk.

When writing scripts, in addition to the regular list of taken words, 
there is now also sst_thread_id.  Don't make any variables with this
name, or whatever happens can be unpredictable.

************************************************************************************
FILE LIST:

test_lua_scripts/*, luascript_backend.cpp & luascript_backend.h:
Not necessary for sstdisksim, but good example code for Lua 5.1

sstdisksim.cpp & sstdisksim.h:
Files that interface with the disksim API.  The disk "element".

sstdisksim_event.cpp & sstdisksim.h:
Event definition for what sstdisksim needs passed through a link to it.

sstdisksim_lua.xml:
test script for sstdisksim lua

sstdisksim_luascriptreader.cpp & sstdisksim_luascriptreader.h:
An interface that reads lua scripts.  Example .xml file is sstdisksim_lua.xml.
An example script is "tracefile".

sstdisksim_posix_call.cpp & sstdisksim_posix_call.h
Files that define bits needed to pass posix events around.  Events are currently
passed between the diskmodels and the tracereader and these are posix events.  
Posix events should probably also be used to pass from the metadata server to the
disk control models, which are fairly close to the io nodes as is.

sstdisksim_tracereader.*:
An element that takes the traces from a tracer, such as tau (see sstdisksim_tau_parser.*),
and sends the events to the disk node.  This element will probably need to be changed in 
the future to start sending events to the next level, probably a data server.

sstdisksim_tau_parser.*
The interface to TAU's api.  A new parser could be substitued for this one and
added to the tracereader if one wished to use a different trace format.

sstdisksim_diskmodel.h:
A guide to what bits one needs to define for a disk control model.

sstdisksim_straightdisk.* & sstdisksim_tracereader.xml:
An example .xml file for running a disk controller model that just goes to a single
disk.  sstdisksim_straightdisk.* are the simplest possible disk controller model
in that it just forwards the posix calls to the single disk.

sstdisksim_raid0.* & sstdisksim_tracereader_raid0.xml:
An example .xml file for running a 2 disk raid0 disk controller model.  Similar to
straightdisk, but uses a raid0 algorithm.

sstdisksim_raid1.* & sstdisksim_tracereader_raid1.xml:
An example .xml file for running a 2 disk raid1 disk controller model.  Similar to
straightdisk & raid0, but uses a raid1 algorithm.


