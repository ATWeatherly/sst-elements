
options {
	STATIC = false;
}

PARSER_BEGIN(OberonParser)

package gov.sandia.sst.oberon.compiler;

import gov.sandia.sst.oberon.compiler.*;
import gov.sandia.sst.oberon.compiler.exp.*;
import gov.sandia.sst.oberon.compiler.stmt.*;

import java.util.*;

public class OberonParser {

	protected Stack<StatementBlock> blockStack;
	protected String fileName;
	
	public void setFileName(String name) {
		fileName = name;
	}
	
	public String getFileName() {
		if(fileName == null) {
			return "";
		} else {
			return fileName;
		}
	}
	
	public StatementBlock getCurrentBlock() {
		return blockStack.peek();
	}
	
	public Stack<StatementBlock> getBlockStack() {
		if(blockStack == null) {
			blockStack = new Stack<StatementBlock>();
		}
		
		return blockStack;
	}

}

PARSER_END(OberonParser)

SKIP : {
   " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : {
 <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}

TOKEN : {
 	<FOR: 	  "for">
  |	<IF:	  "if">
  |	<ELSE:	  "else">
  |	<INTEGER: "int">
  |	<DOUBLE:  "double">
  |	<VOID:    "void">
  |	<RETURN:  "return">
  | <TRUE:	  "true">
  | <FALSE:	  "false">
  | <BOOL:	  "bool">
  | <STRING:  "string">
}

TOKEN : {
 <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  <#LETTER: ["A"-"Z","_","a"-"z"]>
|  <#DIGIT: ["0"-"9"]>
}

Vector<FunctionDefinition> MultiFunctionFile():
{
	OberonVariableType funcType;
	Token funcName;
	OberonVariableType paramType;
	Token varName;
	
	Vector<FunctionDefinition> functions = new Vector<FunctionDefinition>();
	FunctionDefinition funcDef;
}
{
	(
		( 
			<INTEGER>	{ 	funcType = OberonVariableType.INTEGER;	}
		| 	<DOUBLE> 	{	funcType = OberonVariableType.DOUBLE;	}
		| 	<VOID> 		{	funcType = OberonVariableType.VOID;		}
		|	<BOOL>		{	funcType = OberonVariableType.BOOLEAN;	}
		|	<STRING>	{	funcType = OberonVariableType.STRING;	}
		)
		funcName = <IDENTIFIER>
		{
			funcDef = new FunctionDefinition(
				getFileName(),
				funcName.beginLine,
				funcName.beginColumn,
				funcType, funcName.image);
		}
		"("
			(
				( 
					<INTEGER>	{	paramType = OberonVariableType.INTEGER;	}
				| 	<DOUBLE> 	{ 	paramType = OberonVariableType.DOUBLE;	}
				|	<BOOL>		{	paramType = OberonVariableType.BOOLEAN;	}
				|	<STRING>	{	paramType = OberonVariableType.STRING;	}
				)
				varName = <IDENTIFIER>
				{
					funcDef.addParameter(paramType, varName.image);	
				}
			
				(
					","
					( 
						<INTEGER>	{	paramType = OberonVariableType.INTEGER;	}
					| 	<DOUBLE> 	{ 	paramType = OberonVariableType.DOUBLE;	}
					|	<BOOL>		{	paramType = OberonVariableType.BOOLEAN;	}
					|	<STRING>	{	paramType = OberonVariableType.STRING;	}
					)
					varName = <IDENTIFIER>
				
					{
						funcDef.addParameter(paramType, varName.image);	
					}
				)*
			)?
		")"
	
		"{"
			{	getBlockStack().push(funcDef);	}
			StatementBlock()
			{	getBlockStack().pop();			}
		"}"
		
		{
			functions.add(funcDef);
		}
	)*
	
	{
		return functions;
	}
}

void StatementBlock():
{}
{
	(
		(
			DeclarationStatement()
		|	AssignmentOrCallStatement()
		|	IfElseStatement()
		|	ForStatement()
		|	ReturnStatement()
		)
	";"
	)*
}

void DeclarationStatement():
{
	OberonVariableType varType;
	OberonExpression expr;
	DeclarationStatement declStmt = null;
	Token varName;
}
{
	(
		<INTEGER>	{	varType = OberonVariableType.INTEGER; 	}
	|	<DOUBLE>	{	varType = OberonVariableType.DOUBLE;	}
	)

	varName = <IDENTIFIER>
	{	
		declStmt = new DeclarationStatement(
			getFileName(),
			varName.beginLine,
			varName.beginColumn,
			varName.image,
			varType,
			null);
	}

	(
		"="
		
		expr = Expression() {	
			declStmt = new DeclarationStatement(
				getFileName(),
				varName.beginLine,
				varName.beginColumn,
				varName.image,
				varType,
				expr);
		}
	)?
	
	{
		getCurrentBlock().addStatement(declStmt);
	}
}

DeclarationStatement ReturnableDeclarationStatement():
{
	OberonVariableType varType;
	OberonExpression expr;
	DeclarationStatement declStmt = null;
	Token varName;
}
{
	(
		<INTEGER>	{	varType = OberonVariableType.INTEGER; 	}
	|	<DOUBLE>	{	varType = OberonVariableType.DOUBLE;	}
	)

	varName = <IDENTIFIER>
	{	
		declStmt = new DeclarationStatement(
			getFileName(),
			varName.beginLine,
			varName.beginColumn,
			varName.image,
			varType,
			null);
	}

	(
		"="
		
		expr = Expression() {	
			declStmt = new DeclarationStatement(
				getFileName(),
				varName.beginLine,
				varName.beginColumn,
				varName.image,
				varType,
				expr);
		}
	)?
	
	{
		return declStmt;
	}
}

AssignmentStatement ReturnableAssignmentStatement():
{
	Token id;
	OberonExpression expr;
}
{
	id = <IDENTIFIER>
	"="
	expr = Expression()
	
	{
		return new AssignmentStatement(getFileName(),
				id.beginLine,
				id.beginColumn,
				id.image,
				expr);
	}
}

void AssignmentOrCallStatement():
{
	Token id;
	OberonExpression expr;
	OberonStatement stmt = null;
	Vector<OberonExpression> funcExpr = new Vector<OberonExpression>();
}
{
	id = <IDENTIFIER> 
	(
		"=" expr = Expression() {
			stmt = new AssignmentStatement(getFileName(),
				id.beginLine,
				id.beginColumn,
				id.image,
				expr);
		}
	|	"(" ( expr = Expression() { funcExpr.add(expr); } 
			("," expr = Expression() { funcExpr.add(expr); } )* )? {
		
			stmt = new CallStatement(getFileName(),
				id.beginLine,
				id.beginColumn,
				id.image,
				funcExpr);
		} ")" 
	)
	
	{
		getCurrentBlock().addStatement(stmt);
	}
}

void IfElseStatement():
{
	IfElseStatement stmt;
	OberonExpression expr;
	Token ifToken;
}
{
	ifToken = <IF>
	"("
		expr = Expression() {
			stmt = new IfElseStatement(getFileName(),
				ifToken.beginLine,
				ifToken.beginColumn,
				expr);
		}
	")"
	"{"
		{
			getBlockStack().push(stmt.getIfStatements());
		}
		StatementBlock()
		{
			getBlockStack().pop();
		}
	"}"

	(
		<ELSE>
		"{"
			{
				getBlockStack().push(stmt.getElseStatements());
			}
			StatementBlock()
			{
				getBlockStack().pop();
			}
		"}"
	)?
	
	{
		getCurrentBlock().addStatement(stmt);
	}
}

void ForStatement():
{
	DeclarationStatement declStmt = null;
	AssignmentStatement assignStmt = null;
	AssignmentStatement iterStmt = null;
	OberonExpression condExpr;
	ForStatement forStmt = null;
	Token forToken;
}
{
	forToken = <FOR>
	"("
		(	
			declStmt = ReturnableDeclarationStatement()
		|	assignStmt = ReturnableAssignmentStatement()
		)
		";"
		condExpr = Expression()
		";"
		(	iterStmt = ReturnableAssignmentStatement()	)?
		
		{
			if(declStmt != null) {
				forStmt = new ForWithDeclarationStatement(
						getFileName(),
						forToken.beginLine,
						forToken.beginColumn,
						declStmt,
						condExpr,
						iterStmt
					);
			} else {
				forStmt = new ForWithAssignmentStatement(
						getFileName(),
						forToken.beginLine,
						forToken.beginColumn,
						assignStmt,
						condExpr,
						iterStmt
					);
			}
		}
	")"
	"{"
		{	getBlockStack().push(forStmt.getStatementBody());	}
		StatementBlock()
		{	getBlockStack().pop();	}
	"}"
	
	{
		getCurrentBlock().addStatement(forStmt);
	}
}

void ReturnStatement():
{
	OberonExpression expr;
	Token retToken;
}
{
	retToken = <RETURN> 
	expr = Expression()
	
	{
		getCurrentBlock().addStatement(new ReturnStatement(getFileName(),
						retToken.beginLine,
						retToken.beginColumn,
						expr));
	}
}

OberonExpression Expression():
{
	OberonExpression expr;
}
{
	expr = OrExpression()
	{
		return expr;
	}
}

OberonExpression OrExpression():
{
	OberonExpression left;
	OberonExpression right;
}
{
	left = AndExpression() 
	( 
		"||" right = OrExpression() 
		{	
			return new OberonOrExpression(getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left, right);
		}
	)?
	
	{
		return left;
	}
}

OberonExpression AndExpression():
{
	OberonExpression left;
	OberonExpression right;
}
{
	left = EqualExpression() 
	( 
		"&&" right = AndExpression() 
		{	
			return new OberonAndExpression(getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left, right);
		}	
	)?
	
	{
		return left;
	}
}

OberonExpression EqualExpression():
{
	OberonExpression left;
	OberonExpression right;
	OberonEqualityType eqType;
}
{
	left = RelationalExpression() 
	( 
		(	"==" { eqType = OberonEqualityType.EQUALITY; } 
		| 	"!=" { eqType = OberonEqualityType.NOTEQUALITY; }
		) 
		
		right = EqualExpression() 
	
		{	
			switch(eqType) {
			case EQUALITY:
				return new OberonEqualityExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
					break;
			case NOTEQUALITY:
				return new OberonNotEqualityExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
			}
		}	
	)?
	
	{
		return left;
	}
}

OberonExpression RelationalExpression():
{
	OberonExpression left;
	OberonExpression right;
	OberonRelationalType expType;	
}
{
	left = AdditiveExpression() 
	( 
		(	"<" 	{	expType = OberonRelationalType.LESSTHAN;			}
		| 	"<=" 	{	expType = OberonRelationalType.LESSTHANEQUAL;		}
		| 	">" 	{	expType = OberonRelationalType.GREATERTHAN;			}
		| 	">="	{	expType = OberonRelationalType.GREATERTHANEQUAL;	}
		) 
		
		right = RelationalExpression() 
		{
			switch(expType) {
			case LESSTHAN:
				return new OberonLessThanExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
				break;
			case LESSTHANEQUAL:
				return new OberonLessThanEqualExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
				break;
			case GREATERTHAN:
				return new OberonGreaterThanExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
				break;
			case GREATERTHANEQUAL:
				return new OberonGreaterThanEqualExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
				break;
				
			}
		}
	)?
	
	{
		return left;
	}
}

OberonExpression AdditiveExpression():
{
	OberonExpression left;
	OberonExpression right;
	OberonAdditionType addType;
}
{
	left = MultiplyExpression() 
	
	( 
		(	"+" 	{	addType = OberonAdditionType.ADDITION;		}
		| 	"-"		{	addType = OberonAdditionType.SUBTRACTION;	}
		) 
		
		right = AdditiveExpression() 
		
		{
			switch(addType) {
			case ADDITION:
				return new OberonAddExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
				break;
			case SUBTRACTION:
				return new OberonSubExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
				break;
			}
		}
	)?
	
	{
		return left;
	}
}

OberonExpression MultiplyExpression():
{
	OberonExpression left;
	OberonExpression right;
	OberonMultiplyType mulType;
}
{
	left = BracketedExpression() 
	( 
		(	"*" 	{	mulType = OberonMultiplyType.MULTIPLY;		}
		| 	"/"		{	mulType = OberonMultiplyType.DIVIDE;		}
		) 
		
		right = MultiplyExpression() 
		
		{
			switch(mulType) {
			case MULTIPLY:
				return new OberonMultiplyExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
				break;
			case DIVIDE:
				return new OberonDivideExpression(
						getFileName(),
						left.getLineNumber(),
						left.getColumnNumber(),
						left,
						right
					);
				break;
			}
		}
	)?

	{
		return left;
	}
}

OberonExpression BracketedExpression():
{
	OberonExpression expr;
	Token id;
	OberonExpression literal;
}
{
	( 	
		"(" 
			expr = Expression()
			{	
				return new OberonBracketedExpression(
					getFileName(),
					expr.getLineNumber(),
					expr.getColumnNumber(),
					expr);
			}
		")" 
	)
   	|	id = <IDENTIFIER>			
   		{	
   			return new OberonVariableExpression(
   				getFileName(),
				id.beginLine,
				id.beginColumn,
				id.image,
				OberonVariableType.DOUBLE);
   		}
   	|	literal = Literal()		
   		{	
   			return literal;
   		}
}

OberonExpression Literal():
{
	Token lit;
}
{
		lit = <INTEGER_LITERAL>			
			{
				return new OberonIntegerLiteral(
						getFileName(),
						lit.beginLine,
						lit.beginColumn,
						Long.parseLong(lit.image)
					);
			}
   |    lit = <FLOATING_POINT_LITERAL>
   			{
				return new OberonDoubleLiteral(
						getFileName(),
						lit.beginLine,
						lit.beginColumn,
						Double.parseDouble(lit.image)
					);
			}
   |    lit = <STRING_LITERAL>
   			{
				return new OberonStringLiteral(
						getFileName(),
						lit.beginLine,
						lit.beginColumn,
						lit.image
					);
			}
	|	lit = <TRUE>
			{
				return new OberonBooleanLiteral(
						getFileName(),
						lit.beginLine,
						lit.beginColumn,
						true
					);
			}
	|	lit = <FALSE>
			{
				return new OberonBooleanLiteral(
						getFileName(),
						lit.beginLine,
						lit.beginColumn,
						false
					);
			}
	
}


